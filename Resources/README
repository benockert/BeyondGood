OVERALL DESIGN:

We first created a view interface with a render method. We then implemented two separate classes,
one for the graphical view and one for the saved textual view.

The textual save view has one constructor that takes in a model and a print writer (for appending
to the output file). It then reads the model and saves the raw contents of its cells along
with their location (represented as a String) to the output file such that it can be read
later and the same model will be created.

The graphical view has two constructors, a blank constructor which can create a blank GUI, and
then a constructor that takes in a spreadsheet model and displays it in panels, discussed below:

We decided to split the graphical view into three components:
1) SpreadsheetPanel: this is where the actual grid is drawn along with the text
2) RowPanel: this panel is the row header for the scroll pane; a 1 column, N rows grid
3) ColumnPanel: this panel is the column header for the scroll pane; a 1 row, N columns grid

Each of these panels extends JPanel and overrides the paintComponent method so that we can
implement the drawing of the actual cells (represented as rectangles). We felt this was more
efficient than creating a custom cell panel, using a FlowLayout or GridBagLayout to put them
together, as it will take up significantly less memory (one panel with all cells versus one
panel for each cell). Finally, we decided to use a JScrollFrame to design the scroll bars as
we felt this was more efficient and robust than creating a custom component.

We expect to implement a refresh method in a future assignment, which in this case would update
the graphical view after a user action, and updates the save view after a user requests to save.

Below lists a more detailed structure for each file we added to the given starter code.

----------

INTERFACE/CLASS STRUCTURE:

(I) BasicWorksheetView - represents any kind of view of a spreadsheet.
	(C) BasicWorksheetGraphicalView - represents the graphical view of a spreadsheet.
	(C) BasicWorksheetSaveView - represents the textual view of a spreadsheet.
(C) ColumnPanel - represents the column header in a spreadsheet.
(C) RowPanel - represents the row header in a spreadsheet.
(C) SpreadsheetPanel - represents the actual grid of content cells in a spreadsheet.

----------

CHANGES FROM ASSIGNMENT 5:
- We implemented new methods in our model that determine the total number of rows and columns
  a model has. We used this to help determine the size of a spreadsheet we would need to draw
  to display all of the content (and be able to scroll so that all non-empty cells can eventually
  be seen. The default draw size is 100 columns by 50 rows, but these methods help us determine
  if we need to draw more than that.
- We also implemented a remove cell function, which helps us with testing the numRows and numCols
  methods, and we think it may be useful for the controller if we have to handle the delete key
- Changed our main method in BeyondGood to handle the 2 new command line arguments.
- We changed the way we check for cyclic references to be more effective in catching all
  reference errors.
- We overrode the equals method of the worksheet model for use in round trip testing for the save
  view.